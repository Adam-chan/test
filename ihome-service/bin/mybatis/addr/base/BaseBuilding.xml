<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="BaseBuilding" >
   <!-- 楼栋字段 -->
  <sql id="Base_Column_List" >
   ID as id,PREMISES_ID as premisesId,BUILDING_GROUP_ID as buildingGroupId,
   CREATE_TIME as createTime,UPDATE_TIME as updateTime,BUILDING_NAME as buildingName, 
   BUILDING_CODE as buildingCode,PROPERTY_NATURE as propertyNature,BUILDING_TYPE as buildingType,
   BUILDING_CONST as buildingConst,BUILDING_YEAR as buildingYear,UNIT_NUM as unitNum, 
   UNIT_PRE  as unitPre,UNIT_SUF as unitSuf,UNIT_TYPE as unitType,UP_FLOOR_START as upFloorStart,
   UP_FLOOR_TOTAL as uPfloorTotal,UNDER_FLOORS as undeRfloors,IGNORE_STAIR_NUM as ignoreStairNum,
   PURPOSE as purpose,NUM_START as numStart,NUM_END as numEnd,
   COST_TYPE as costType,COOL_COST as coolCost,PROPERTY_FEE as propertyFee,AREA_ID as areaId, EDU_ID as eduId,LAND_LIMIT as landLimit,SORT as sort
  </sql>
  <sql id="unit_Column_List" >
   bb.ID as id,bb.PREMISES_ID as premisesId,bb.BUILDING_GROUP_ID as buildingGroupId,
   bb.BUILDING_NAME as buildingName,bb.BUILDING_CODE as buildingCode,bb.PROPERTY_NATURE as propertyNature,
   bb.BUILDING_TYPE as buildingType,bb.BUILDING_CONST as buildingConst,bb.BUILDING_YEAR as buildingYear,
   bb.UNIT_NUM as unitNum,bb.UNIT_PRE  as unitPre,bb.UNIT_SUF as unitSuf,bb.UNIT_TYPE as unitType,
   bb.UP_FLOOR_START as upFloorStart,bb.UP_FLOOR_TOTAL as uPfloorTotal,bb.UNDER_FLOORS as undeRfloors,
   bb.IGNORE_STAIR_NUM as ignoreStairNum,bb.PURPOSE as purpose,bb.NUM_START as numStart,bb.NUM_END as numEnd 
  </sql>
    <!-- 根据id查询楼栋实体-->
  <select id="getBaseBuilding" resultType="baseBuildingModel" parameterType="map" >
    select 
    <include refid="Base_Column_List" />
    from BASE_BUILDING
    where ID = #{baseBuildingId,jdbcType=DECIMAL}
  </select>
  <!-- 回显单元、房间生成规则 -->
  <select id="getBuildingUnitRule" resultType="baseBuildingModel" parameterType="map" >
    select 
    <include refid="unit_Column_List" />
    ,bu.ID as unitId,bu.CODE as code,bu.PREFIX as prefix,bu.SUFFIX as suffix,bu.LADDERS as ladders,bu.FLATS as flats,bu.ROOM_IGNORE as roomIgnore,
    bu.NUM_START as roomNumStart,bu.NUM_END as roomNumEnd,bu.GENERATIVE_RULE as generativeRule,bu.UP_FLOORS as upFloors,bu.FLOORS as floors 
    from BASE_BUILDING bb
    inner join BUILDING_UNITS bu on bb.ID = bu.BUILDING_ID
    where bb.ID = #{baseBuildingId,jdbcType=DECIMAL}
    ORDER BY CASE WHEN ascii(bu.CODE) BETWEEN 48 AND 57 THEN TO_NUMBER(bu.CODE) ELSE ascii(bu.CODE) END
  </select>
   <!-- 根据分组获取楼栋数 -->
  <select id="getBaseBuildingNum" resultType="java.lang.Integer" parameterType="map" >
    select 
    	count(0)
    from BASE_BUILDING
      <where>
      		<if test="groupId != null">
      			and BUILDING_GROUP_ID = #{groupId}
			</if>
   		 	<if test="updateBuildingName != null and updateBuildingName !='' and baseBuildingId!=null and premisesId !=null">
			  and BUILDING_NAME =#{updateBuildingName} and ID &lt;&gt; #{baseBuildingId} and PREMISES_ID=${premisesId}
			</if>
			<if test="buildingName != null and buildingName !='' and premisesId != null and premisesId !='' ">
			  and BUILDING_NAME =#{buildingName} and PREMISES_ID =#{premisesId}
			</if>
	</where>		
  </select>
   
    <!-- 根据楼盘id获取多条楼栋数据-->
  <select id="getBaseBuildingList" resultType="baseBuildingModel" parameterType="String" >
    select 
    <include refid="Base_Column_List" />
    from BASE_BUILDING
    where PREMISES_ID = #{premisesId,jdbcType=DECIMAL}
  </select>
    <!-- 根据id删除楼栋实体-->
  <delete id="deleteBaseBuilding" parameterType="map" >
    delete from BASE_BUILDING
    where ID = #{buildingId}
  </delete>
  <!-- 插入一条楼栋数据 -->
  <insert id="insertBaseBuilding" parameterType="map" >
    <selectKey resultType="java.lang.Integer" order="BEFORE" keyProperty="id">
	SELECT BASE_BUILDING_SEQ.NEXTVAL FROM DUAL
	</selectKey>
    insert into BASE_BUILDING (ID, BUILDING_PROPERTY, PREMISES_ID, 
      BUILDING_GROUP_ID, CREATE_TIME, UPDATE_TIME, 
      BUILDING_NAME, BUILDING_CODE, PROPERTY_NATURE, 
      BUILDING_TYPE, BUILDING_CONST, BUILDING_YEAR, 
      UNIT_NUM, UNIT_PRE, UNIT_SUF, 
      UNIT_TYPE, UP_FLOOR_START, UP_FLOOR_TOTAL, 
      UNDER_FLOORS, IGNORE_STAIR_NUM,PURPOSE,NUM_START,NUM_END,
      COST_TYPE,COOL_COST,PROPERTY_FEE,AREA_ID,EDU_ID,LAND_LIMIT)
    values (#{baseBuildingId,jdbcType=DECIMAL},  #{premisesId,jdbcType=DECIMAL}, 
      #{buildingGroupId,jdbcType=DECIMAL}, #{createTime,jdbcType=DATE}, #{updateTime,jdbcType=DATE}, 
      #{buildingName,jdbcType=VARCHAR}, #{buildingCode,jdbcType=VARCHAR}, #{propertyNature,jdbcType=DECIMAL}, 
      #{buildingType,jdbcType=DECIMAL}, #{buildingConst,jdbcType=DECIMAL}, #{buildingYear,jdbcType=DECIMAL}, 
      #{unitNum,jdbcType=DECIMAL}, #{unitPre,jdbcType=VARCHAR}, #{unitSuf,jdbcType=VARCHAR}, 
      #{unitType,jdbcType=VARCHAR}, #{upFloorStart,jdbcType=DECIMAL}, #{upFloorTotal,jdbcType=DECIMAL}, 
      #{underFloors,jdbcType=DECIMAL}, #{ignoreStairNum,jdbcType=VARCHAR},#{purpose},#{numStart},#{numEnd},#{generativeRule},
      #{costType}, #{coolCost},#{propertyFee},#{areaId},#{eduId},#{landLimit})
  </insert>
  <!-- 选择性插入实体一条 -->
  <insert id="insertSelective" parameterType="map" >
  <selectKey resultType="java.lang.Integer" order="BEFORE" keyProperty="id">
	SELECT BASE_BUILDING_SEQ.NEXTVAL FROM DUAL
	</selectKey>
    insert into BASE_BUILDING
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      
      <if test="premisesId != null" >
        PREMISES_ID,
      </if>
      <if test="buildingGroupId != null" >
        BUILDING_GROUP_ID,
      </if>
      <if test="createTime != null" >
        CREATE_TIME,
      </if>
      <if test="updateTime != null" >
        UPDATE_TIME,
      </if>
      <if test="buildingName != null" >
        BUILDING_NAME,
      </if>
      <if test="buildingCode != null" >
        BUILDING_CODE,
      </if>
      <if test="propertyNature != null and propertyNature != ''" >
        PROPERTY_NATURE,
      </if>
      <if test="buildingType != null" >
        BUILDING_TYPE,
      </if>
      <if test="buildingConst != null" >
        BUILDING_CONST,
      </if>
      <if test="buildingYear != null" >
        BUILDING_YEAR,
      </if>
      <if test="unitNum != null" >
        UNIT_NUM,
      </if>
      <if test="unitPre != null" >
        UNIT_PRE,
      </if>
      <if test="unitSuf != null" >
        UNIT_SUF,
      </if>
      <if test="unitType != null" >
        UNIT_TYPE,
      </if>
      <if test="upFloorStart != null" >
        UP_FLOOR_START,
      </if>
      <if test="upFloorTotal != null" >
        UP_FLOOR_TOTAL,
      </if>
      <if test="underFloors != null and underFloors != ''" >
        UNDER_FLOORS,
      </if>
      <if test="ignoreStairNum != null" >
        IGNORE_STAIR_NUM,
      </if>
       <if test="purpose != null" >
        PURPOSE,
      </if>
       <if test="numStart != null" >
        NUM_START,
      </if>
       <if test="numEnd != null" >
        NUM_END,
      </if>
    
      <if test="costType != null" >
        COST_TYPE,
      </if>
       <if test="coolCost != null" >
        COOL_COST,
      </if>
       <if test="propertyFee != null" >
        PROPERTY_FEE,
      </if>
       <if test="areaId != null" >
        AREA_ID,
      </if>
       <if test="eduId != null" >
        EDU_ID,
      </if>
        <if test="landLimit != null" >
        LAND_LIMIT ,
      </if>
         <if test="sort != null" >
        SORT ,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{baseBuildingId},
      </if>
     
      <if test="premisesId != null" >
        #{premisesId},
      </if>
      <if test="buildingGroupId != null" >
        #{buildingGroupId},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=DATE},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=DATE},
      </if>
      <if test="buildingName != null" >
        #{buildingName,jdbcType=VARCHAR},
      </if>
      <if test="buildingCode != null" >
        #{buildingCode,jdbcType=VARCHAR},
      </if>
      <if test="propertyNature != null" >
        #{propertyNature},
      </if>
      <if test="buildingType != null" >
        #{buildingType},
      </if>
      <if test="buildingConst != null" >
        #{buildingConst},
      </if>
      <if test="buildingYear != null" >
        #{buildingYear},
      </if>
      <if test="unitNum != null" >
        #{unitNum},
      </if>
      <if test="unitPre != null" >
        #{unitPre},
      </if>
      <if test="unitSuf != null" >
        #{unitSuf},
      </if>
      <if test="unitType != null" >
        #{unitType},
      </if>
      <if test="upFloorStart != null" >
        #{upFloorStart},
      </if>
      <if test="upFloorTotal != null and upFloorTotal != ''" >
        #{upFloorTotal},
      </if>
      <if test="underFloors != null and underFloors != ''" >
        #{underFloors},
      </if>
      <if test="ignoreStairNum != null" >
        #{ignoreStairNum},
      </if>
       <if test="purpose != null" >
        #{purpose},
      </if>
       <if test="numStart != null" >
        #{numStart},
      </if>
       <if test="numEnd != null" >
        #{numEnd},
      </if>
       <if test="generativeRule != null" >
        #{generativeRule},
      </if>
         <if test="costType != null" >
       #{costType},
      </if>
       <if test="coolCost != null" >
        #{coolCost},
      </if>
       <if test="propertyFee != null" >
       #{propertyFee},
      </if>
         <if test="areaId != null" >
       #{areaId},
      </if>
      <if test="eduId != null" >
       #{eduId},
      </if>
       <if test="landLimit != null" >
       #{landLimit},
      </if>
        <if test="sort != null" >
       #{sort},
      </if>
    </trim>
  </insert>
  <!-- 有选择的根据id更新一条数据 -->
  <update id="updateSelective" parameterType="map" >
    update BASE_BUILDING
    <set>
      <if test="premisesId != null" >
        PREMISES_ID = #{premisesId,jdbcType=DECIMAL},
      </if>
      <if test="buildingGroupId != null" >
        BUILDING_GROUP_ID = #{buildingGroupId,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null" >
        CREATE_TIME = #{createTime,jdbcType=DATE},
      </if>
      <if test="updateTime != null" >
        UPDATE_TIME = #{updateTime,jdbcType=DATE},
      </if>
      <if test="buildingName != null" >
        BUILDING_NAME = #{buildingName,jdbcType=VARCHAR},
      </if>
      <if test="buildingCode != null" >
        BUILDING_CODE = #{buildingCode,jdbcType=VARCHAR},
      </if>
      <if test="propertyNature != null" >
        PROPERTY_NATURE = #{propertyNature,jdbcType=DECIMAL},
      </if>
      <if test="buildingType != null" >
        BUILDING_TYPE = #{buildingType,jdbcType=DECIMAL},
      </if>
      <if test="buildingConst != null" >
        BUILDING_CONST = #{buildingConst,jdbcType=DECIMAL},
      </if>
      <if test="buildingYear != null" >
        BUILDING_YEAR = #{buildingYear,jdbcType=DECIMAL},
      </if>
      <if test="unitNum != null" >
        UNIT_NUM = #{unitNum,jdbcType=DECIMAL},
      </if>
      <if test="unitPre != null" >
        UNIT_PRE = #{unitPre,jdbcType=VARCHAR},
      </if>
      <if test="unitSuf != null" >
        UNIT_SUF = #{unitSuf,jdbcType=VARCHAR},
      </if>
      <if test="unitType != null" >
        UNIT_TYPE = #{unitType,jdbcType=VARCHAR},
      </if>
      <if test="upFloorStart != null" >
        UP_FLOOR_START = #{upFloorStart,jdbcType=DECIMAL},
      </if>
      <if test="upFloorTotal != null" >
        UP_FLOOR_TOTAL = #{upFloorTotal,jdbcType=DECIMAL},
      </if>
      <if test="underFloors != null" >
        UNDER_FLOORS = #{underFloors,jdbcType=DECIMAL},
      </if>
      <if test="ignoreStairNum != null" >
        IGNORE_STAIR_NUM = #{ignoreStairNum,jdbcType=VARCHAR},
      </if>
      <if test="purpose != null" >
        PURPOSE = #{purpose,jdbcType=DECIMAL},
      </if>
       <if test="costType != null" >
       COST_TYPE = #{costType},
      </if>
       <if test="coolCost != null" >
        COOL_COST = #{coolCost},
      </if>
       <if test="propertyFee != null" >
        PROPERTY_FEE = #{propertyFee},
      </if>
       <if test="areaId != null" >
        AREA_ID = #{areaId},
      </if>
       <if test="eduId != null" >
        EDU_ID = #{eduId},
      </if>
        <if test="landLimit != null" >
        LAND_LIMIT = #{landLimit},
      </if>
      <if test="numStart != null" >
        NUM_START = #{numStart},
      </if>
      <if test="numEnd != null" >
        NUM_END = #{numEnd},
      </if>
    </set>
    where ID = #{baseBuildingId,jdbcType=DECIMAL}
  </update>
  <!-- 分组id赋值为空 -->
  <update id="isGroupIdNull" parameterType="map" >
    update BASE_BUILDING
    	set BUILDING_GROUP_ID = null
    where BUILDING_GROUP_ID in (${groupId})
  </update>  
 <!--根据id 更新一条数据  -->
  <update id="updateBaseBuilding" parameterType="map" >
    update BASE_BUILDING
    set PREMISES_ID = #{premisesId,jdbcType=DECIMAL},
      BUILDING_GROUP_ID = #{buildingGroupId,jdbcType=DECIMAL},
      CREATE_TIME = #{createTime,jdbcType=DATE},
      UPDATE_TIME = #{updateTime,jdbcType=DATE},
      BUILDING_NAME = #{buildingName,jdbcType=VARCHAR},
      BUILDING_CODE = #{buildingCode,jdbcType=VARCHAR},
      PROPERTY_NATURE = #{propertyNature,jdbcType=DECIMAL},
      BUILDING_TYPE = #{buildingType,jdbcType=DECIMAL},
      BUILDING_CONST = #{buildingConst,jdbcType=DECIMAL},
      BUILDING_YEAR = #{buildingYear,jdbcType=DECIMAL},
      UNIT_NUM = #{unitNum,jdbcType=DECIMAL},
      UNIT_PRE = #{unitPre,jdbcType=VARCHAR},
      UNIT_SUF = #{unitSuf,jdbcType=VARCHAR},
      UNIT_TYPE = #{unitType,jdbcType=VARCHAR},
      UP_FLOOR_START = #{upFloorStart,jdbcType=DECIMAL},
      UP_FLOOR_TOTAL = #{upFloorTotal,jdbcType=DECIMAL},
      UNDER_FLOORS = #{underFloors,jdbcType=DECIMAL},
      IGNORE_STAIR_NUM = #{ignoreStairNum,jdbcType=VARCHAR},
      COST_TYPE = #{costType},
      COOL_COST = #{coolCost},
      PROPERTY_FEE = #{propertyFee},
      AREA_ID = #{areaId},
      EDU_ID = #{eduId},
      LAND_LIMIT = #{landLimit}
    where ID = #{baseBuildingId,jdbcType=DECIMAL}
  </update>
	
	<!-- 根据 楼盘id,分组id,编号范围 查询楼栋实体-->
	<select id="hasBaseBuilding" resultType="Integer" parameterType="map" >
		select 
			count(ID)
		from BASE_BUILDING
		where BUILDING_CODE between #{numStart,jdbcType=VARCHAR} and #{numEnd,jdbcType=VARCHAR}
	</select>
	
	<!-- 批量插入楼栋实体-->
	<insert id="insertBatch" parameterType="map" useGeneratedKeys="false">  
		insert into BASE_BUILDING 
		<trim prefix="(" suffix=")" suffixOverrides="," >
				ID,
				PREMISES_ID,
			<if test="buildingGroupId != '' and buildingGroupId !=null " >
				BUILDING_GROUP_ID,
			</if>
				CREATE_TIME,
				UPDATE_TIME,
			<if test="propertyNature != '' and  propertyNature !=null" >
				PROPERTY_NATURE,
			</if>
			<if test="buildingType != '' and  buildingType !=null" >
				BUILDING_TYPE,
			</if>
			<if test="buildingConst != '' and  buildingConst !=null" >
				BUILDING_CONST,
			</if>
			<if test="buildingYear != '' and  buildingYear !=null" >
				BUILDING_YEAR,
			</if>
			<if test="purpose != '' and  purpose != null" >
				PURPOSE,
			</if>
			<if test="coolCost != '' and coolCost != null" >
				COOL_COST,
			</if>
			<if test="propertyFee != '' and propertyFee != null" >
				PROPERTY_FEE,
			</if>	
			<if test="coolCost != '' and coolCost != null " >
				COST_TYPE,
			</if>
			<if test="areaId != '' and areaId != null " >
				AREA_ID,
			</if>
			<if test="eduId != '' and eduId != null "  >
				EDU_ID,
			</if>
			<if test="landLimit != '' and landLimit != null "  >
				LAND_LIMIT,
			</if>
			<if test="sort != null and sort !=''" >
      		 	SORT,
      		</if>
			BUILDING_NAME,
			BUILDING_CODE,
			</trim>
	  <trim  suffixOverrides="," >
			select BASE_BUILDING_SEQ.NEXTVAL,
					#{premisesId},
				<if test="buildingGroupId != '' and buildingGroupId != null" >
					#{buildingGroupId},
				</if>
					sysdate,
					sysdate,
				<if test="propertyNature != '' and  propertyNature != null" >
					#{propertyNature},
				</if>
				<if test="buildingType != '' and  buildingType != null" >
					#{buildingType},
				</if>
				<if test="buildingConst != '' and  buildingConst != null" >
					#{buildingConst},
				</if>
				<if test="buildingYear != '' and  buildingYear != null" >
					#{buildingYear},
				</if>	
				<if test="purpose != '' and  purpose != null" >
					#{purpose},
				</if>
				<if test="coolCost != '' and coolCost != null "  >
					#{coolCost},
				</if>
				<if test="propertyFee != '' and propertyFee != null" >
					#{propertyFee},
				</if>	
				<if test="coolCost != '' and coolCost != null " >
					#{costType},
				</if>	
				<if test="areaId != '' and areaId != null " >
					#{areaId},
				</if>
				<if test="eduId != '' and eduId != null" >
					#{eduId},
				</if>
				<if test="landLimit != '' and landLimit != null" >
					#{landLimit},
				</if>
				<if test="sort != null and sort != '' ">
      		 		#{sort},
      			</if>
				a.* from (
					<foreach collection="codes" item="item" index="index" separator="UNION ALL" >
						SELECT 
							#{item.buildingName},
							#{item.buildingCode}
						FROM DUAL
					</foreach>)a
		    </trim>
	</insert>
	
	<!-- 新增单条栋座信息 -->
	<insert id="insertOneBaseBuilding" parameterType="map">  
	    INSERT INTO BASE_BUILDING (
			ID,
			PREMISES_ID,
			BUILDING_GROUP_ID,
			PURPOSE,
			BUILDING_YEAR,
			BUILDING_CONST,
			BUILDING_TYPE,
			BUILDING_NAME,
			PROPERTY_NATURE,
			COST_TYPE,
			PROPERTY_FEE,
			CREATE_TIME,
			AREA_ID,
			EDU_ID,
			LAND_LIMIT
		)VALUES(
		    BASE_BUILDING_SEQ.NEXTVAL, 
		    #{premisesId,jdbcType=DECIMAL},
		    #{groupId,jdbcType=DECIMAL},
			#{purpose,jdbcType=DECIMAL}, 
			#{buildingYear,jdbcType=DECIMAL}, 
			#{buildingConst,jdbcType=VARCHAR}, 
			#{buildingType,jdbcType=DECIMAL}, 
			#{buildingName,jdbcType=VARCHAR}, 
			#{propertyNature,jdbcType=DECIMAL}, 
			#{costType,jdbcType=DECIMAL}, 
			#{propertyFee,jdbcType=DECIMAL},
			SYSDATE
			#{areaId,jdbcType=DECIMAL}, 
			#{eduId,jdbcType=DECIMAL},
			#{landLimit,jdbcType=DECIMAL},
		)
    </insert>
    
    <!-- 校验栋座是否被引用-->
	<select id="isQuotedWithBuilding" resultType="java.lang.Integer" parameterType="map">
	    SELECT
			count(u.id)
		FROM
			Base_Building b
		LEFT JOIN Building_Units u ON u.building_id = b.id
		WHERE
			1=1
		<if test="buildingId != null and buildingId !=''"> 
	    	AND	b.id = #{buildingId}
	  	</if>
	</select>
	
	<!-- 校验栋座是否被引用-->
	<select id="getpremises" resultType="basePremisesModel" parameterType="map">
	    select  
		    ID as id,
		    BUILDING_AGE as buildingAge ,     
		    HOUSING_PURPOSES as housingPurposes  ,  
		    LAND_USAGE_TERM as landUsageTerm,
		    AREA_COVERED as areaCovered,
		    OVERALL_FLOORAGE as overallFloorage,
		    HOUSING_TYPE as housingType,
		    HAS_PROPERTY_MANAGEMENT_COMPAN as hasPropertyManagementCompany,
		    PROPERTY_MANAGEMENT_COMPANY as propertyManagementCompany,
		    PROPERTY_FEE as propertyFee,
		    CLEANING_FEE as cleaningFee,
		    EDU_IDS as eduIds,
		    BUILDING_STRUCTURE as buildingStructure,
		    BUILDING_TYPE as buildingType,
		    HOUSING_PROPERTY as  housingProperty,
		    NAME as name
	    from 
	    	base_premises 
	    where id = #{premisesId}
	</select>
	<!-- 楼栋首页导航 获取楼栋部分 -->
	<select id="getBuildingMenu" resultType="premisesMenuModel" parameterType="map">
	select a.id as buildingId, a.building_name as buildingName,(select count(0) from building_units where building_units.building_id = a.id ) as statistics
 	 from base_building a
	where 1=1
		<if test="groupId != null and groupId !=''"> 
			and a.building_group_id = #{groupId} 
	   	</if>
	   	<if test="premisesId != null and premisesId !=''"> 
		    and	a.premises_id = #{premisesId} and a.building_group_id is null
	   	</if>
 		   order by a.sort, CASE WHEN ascii(a.building_code) BETWEEN 48 AND 57 THEN TO_NUMBER(a.building_code) ELSE ascii(a.building_code) END
	</select>
	
</mapper>